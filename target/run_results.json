{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.3", "generated_at": "2025-07-14T00:46:30.173664Z", "invocation_id": "69e5d08d-66fa-4acb-8930-ec219355401b", "invocation_started_at": "2025-07-14T00:46:15.854787Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T00:46:23.359415Z", "completed_at": "2025-07-14T00:46:23.365414Z"}, {"name": "execute", "started_at": "2025-07-14T00:46:23.366415Z", "completed_at": "2025-07-14T00:46:23.967506Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.60909104347229, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bdac0e-0002-6195-0001-fc7700011e12"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.netflix_analytics.stg_user_watch_sessions", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT * FROM NETFLIX_ANALYTICS.MARTS.user_watch_sessions\n),\n\ncleaned AS (\n    SELECT\n        -- Primary key\n        user_id,\n        show_name,\n        watch_date,\n        \n        -- Metrics\n        COALESCE(watch_duration_minutes, 0) as watch_duration_minutes,\n        COALESCE(engagement_score, 0) as engagement_score,\n        COALESCE(completion_rate, 0) as completion_rate,\n        \n        -- Derived fields\n        CASE \n            WHEN watch_duration_minutes >= 120 THEN 1 \n            ELSE 0 \n        END as is_binge_session,\n        \n        -- Time dimensions\n        DATE(watch_date) as watch_date_only,\n        HOUR(watch_date) as watch_hour,\n        DAYOFWEEK(watch_date) as day_of_week,\n        DAYNAME(watch_date) as day_name,\n        MONTH(watch_date) as month,\n        QUARTER(watch_date) as quarter,\n        YEAR(watch_date) as year,\n        \n        -- Metadata\n        CURRENT_TIMESTAMP() as processed_at\n        \n    FROM source\n    WHERE watch_date IS NOT NULL\n      AND user_id IS NOT NULL\n      AND show_name IS NOT NULL\n)\n\nSELECT * FROM cleaned", "relation_name": "NETFLIX_ANALYTICS.MARTS.stg_user_watch_sessions", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T00:46:23.972508Z", "completed_at": "2025-07-14T00:46:23.975506Z"}, {"name": "execute", "started_at": "2025-07-14T00:46:23.975506Z", "completed_at": "2025-07-14T00:46:24.535497Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.5639894008636475, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bdac0e-0002-6319-0001-fc7700010f22"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.netflix_analytics.int_user_engagement", "compiled": true, "compiled_code": "\n\nWITH user_sessions AS (\n    SELECT * FROM NETFLIX_ANALYTICS.MARTS.stg_user_watch_sessions\n),\n\nuser_metrics AS (\n    SELECT\n        user_id,\n        show_name,\n        watch_date,\n        watch_duration_minutes,\n        engagement_score,\n        completion_rate,\n        is_binge_session,\n        \n        -- Session-level metrics\n        SUM(watch_duration_minutes) OVER (\n            PARTITION BY user_id \n            ORDER BY watch_date \n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) as cumulative_watch_time,\n        \n        COUNT(*) OVER (\n            PARTITION BY user_id \n            ORDER BY watch_date \n            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n        ) as session_number,\n        \n        -- Rolling averages\n        AVG(engagement_score) OVER (\n            PARTITION BY user_id \n            ORDER BY watch_date \n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) as rolling_avg_engagement_7sessions,\n        \n        AVG(watch_duration_minutes) OVER (\n            PARTITION BY user_id \n            ORDER BY watch_date \n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) as rolling_avg_duration_7sessions,\n        \n        -- Binge watching patterns\n        SUM(is_binge_session) OVER (\n            PARTITION BY user_id \n            ORDER BY watch_date \n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\n        ) as binge_sessions_last_7,\n        \n        -- Time-based patterns\n        LAG(watch_date) OVER (\n            PARTITION BY user_id \n            ORDER BY watch_date\n        ) as previous_session_date,\n        \n        DATEDIFF('hour', \n            LAG(watch_date) OVER (PARTITION BY user_id ORDER BY watch_date),\n            watch_date\n        ) as hours_since_last_session\n        \n    FROM user_sessions\n),\n\nuser_segments AS (\n    SELECT\n        *,\n        CASE \n            WHEN rolling_avg_engagement_7sessions >= 80 THEN 'High Engagement'\n            WHEN rolling_avg_engagement_7sessions >= 60 THEN 'Medium Engagement'\n            ELSE 'Low Engagement'\n        END as engagement_segment,\n        \n        CASE \n            WHEN binge_sessions_last_7 >= 3 THEN 'Binge Watcher'\n            WHEN binge_sessions_last_7 >= 1 THEN 'Occasional Binge'\n            ELSE 'Regular Watcher'\n        END as binge_segment,\n        \n        CASE \n            WHEN hours_since_last_session <= 24 THEN 'Daily User'\n            WHEN hours_since_last_session <= 168 THEN 'Weekly User'  -- 7 days\n            ELSE 'Occasional User'\n        END as frequency_segment\n        \n    FROM user_metrics\n)\n\nSELECT * FROM user_segments", "relation_name": "NETFLIX_ANALYTICS.MARTS.int_user_engagement", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T00:46:24.539496Z", "completed_at": "2025-07-14T00:46:24.541498Z"}, {"name": "execute", "started_at": "2025-07-14T00:46:24.542497Z", "completed_at": "2025-07-14T00:46:26.906148Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.3676514625549316, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bdac0e-0002-6195-0001-fc7700011e16"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.netflix_analytics.fact_user_watch_sessions", "compiled": true, "compiled_code": "\n\nWITH user_engagement AS (\n    SELECT * FROM NETFLIX_ANALYTICS.MARTS.int_user_engagement\n),\n\nfinal AS (\n    SELECT\n        -- Primary key\n        user_id,\n        show_name,\n        watch_date,\n        HOUR(watch_date) as watch_hour,\n        DAYOFWEEK(watch_date) as day_of_week,\n        DAYNAME(watch_date) as day_name,\n        MONTH(watch_date) as month,\n        QUARTER(watch_date) as quarter,\n        YEAR(watch_date) as year,\n        \n        -- Fact metrics\n        watch_duration_minutes,\n        engagement_score,\n        completion_rate,\n        is_binge_session,\n        \n        -- Derived metrics\n        cumulative_watch_time,\n        session_number,\n        rolling_avg_engagement_7sessions,\n        rolling_avg_duration_7sessions,\n        binge_sessions_last_7,\n        hours_since_last_session,\n        \n        -- Segmentation\n        engagement_segment,\n        binge_segment,\n        frequency_segment,\n        \n        -- Time dimensions\n        DATE(watch_date) as watch_date_only,\n        \n        CURRENT_TIMESTAMP() as processed_at\n        \n    FROM user_engagement\n)\n\nSELECT * FROM final", "relation_name": "NETFLIX_ANALYTICS.MARTS.fact_user_watch_sessions", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T00:46:26.911149Z", "completed_at": "2025-07-14T00:46:26.914149Z"}, {"name": "execute", "started_at": "2025-07-14T00:46:26.917148Z", "completed_at": "2025-07-14T00:46:27.816372Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9072232246398926, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bdac0e-0002-6195-0001-fc7700011e1a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.netflix_analytics.dim_shows", "compiled": true, "compiled_code": "\n\nWITH show_aggregates AS (\n    SELECT\n        show_name,\n        \n        -- Basic metrics\n        COUNT(*) as total_views,\n        COUNT(DISTINCT user_id) as unique_viewers,\n        SUM(watch_duration_minutes) as total_watch_time_minutes,\n        AVG(watch_duration_minutes) as avg_watch_duration,\n        AVG(engagement_score) as avg_engagement_score,\n        AVG(completion_rate) as avg_completion_rate,\n        \n        -- Binge watching metrics\n        SUM(is_binge_session) as total_binge_sessions,\n        ROUND(SUM(is_binge_session) * 100.0 / COUNT(*), 2) as binge_session_ratio,\n        \n        -- Time-based metrics\n        MIN(watch_date) as first_watched_date,\n        MAX(watch_date) as last_watched_date,\n        DATEDIFF('day', MIN(watch_date), MAX(watch_date)) as days_in_catalog,\n        \n        -- Viewer engagement\n        ROUND(COUNT(*) * 1.0 / COUNT(DISTINCT user_id), 2) as avg_views_per_viewer,\n        ROUND(SUM(watch_duration_minutes) * 1.0 / COUNT(DISTINCT user_id), 2) as avg_watch_time_per_viewer,\n        \n        -- Popularity metrics\n        COUNT(DISTINCT DATE(watch_date)) as unique_watch_days,\n        ROUND(COUNT(*) * 1.0 / COUNT(DISTINCT DATE(watch_date)), 2) as avg_daily_views,\n        \n        -- Peak activity\n        MODE(watch_hour) as most_common_watch_hour,\n        MODE(day_name) as most_common_watch_day,\n        \n        -- Recency\n        DATEDIFF('day', MAX(watch_date), CURRENT_DATE()) as days_since_last_view\n        \n    FROM NETFLIX_ANALYTICS.MARTS.fact_user_watch_sessions\n    GROUP BY show_name\n),\n\nshow_rankings AS (\n    SELECT\n        *,\n        -- Percentile rankings\n        PERCENT_RANK() OVER (ORDER BY total_views) as views_percentile,\n        PERCENT_RANK() OVER (ORDER BY avg_engagement_score) as engagement_percentile,\n        PERCENT_RANK() OVER (ORDER BY binge_session_ratio) as binge_percentile,\n        -- Top show flags\n        CASE \n            WHEN total_views >= PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY total_views) OVER () THEN 'Blockbuster'\n            WHEN total_views >= PERCENTILE_CONT(0.7) WITHIN GROUP (ORDER BY total_views) OVER () THEN 'Hit'\n            ELSE 'Regular'\n        END as popularity_category,\n        CASE \n            WHEN avg_engagement_score >= 80 THEN 'Highly Engaging'\n            WHEN avg_engagement_score >= 60 THEN 'Moderately Engaging'\n            ELSE 'Low Engagement'\n        END as engagement_level,\n        \n        CASE \n            WHEN binge_session_ratio >= 50 THEN 'Binge-Worthy'\n            WHEN binge_session_ratio >= 25 THEN 'Occasionally Binged'\n            ELSE 'Regular Viewing'\n        END as binge_category,\n        \n        -- Trending indicators\n        CASE \n            WHEN days_since_last_view <= 1 THEN 'Trending'\n            WHEN days_since_last_view <= 7 THEN 'Recent'\n            WHEN days_since_last_view <= 30 THEN 'Stable'\n            ELSE 'Declining'\n        END as trend_status\n        \n    FROM show_aggregates\n)\n\nSELECT * FROM show_rankings", "relation_name": "NETFLIX_ANALYTICS.MARTS.dim_shows", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T00:46:26.915149Z", "completed_at": "2025-07-14T00:46:26.919151Z"}, {"name": "execute", "started_at": "2025-07-14T00:46:26.921151Z", "completed_at": "2025-07-14T00:46:28.292055Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.381906270980835, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bdac0e-0002-6319-0001-fc7700010f26"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.netflix_analytics.dim_users", "compiled": true, "compiled_code": "\n\nWITH user_aggregates AS (\n    SELECT\n        user_id,\n        \n        -- Basic metrics\n        COUNT(*) as total_sessions,\n        SUM(watch_duration_minutes) as total_watch_time_minutes,\n        AVG(watch_duration_minutes) as avg_session_duration,\n        AVG(engagement_score) as avg_engagement_score,\n        AVG(completion_rate) as avg_completion_rate,\n        \n        -- Binge watching metrics\n        SUM(is_binge_session) as total_binge_sessions,\n        ROUND(SUM(is_binge_session) * 100.0 / COUNT(*), 2) as binge_session_ratio,\n        \n        -- Time-based metrics\n        MIN(watch_date) as first_watch_date,\n        MAX(watch_date) as last_watch_date,\n        DATEDIFF('day', MIN(watch_date), MAX(watch_date)) as days_active,\n        \n        -- Engagement patterns\n        COUNT(DISTINCT show_name) as unique_shows_watched,\n        COUNT(DISTINCT DATE(watch_date)) as unique_watch_days,\n        \n        -- Peak activity\n        MODE(watch_hour) as most_common_watch_hour,\n        MODE(day_name) as most_common_watch_day,\n        \n        -- Current segments\n        MAX(engagement_segment) as current_engagement_segment,\n        MAX(binge_segment) as current_binge_segment,\n        MAX(frequency_segment) as current_frequency_segment,\n        \n        -- Recency metrics\n        DATEDIFF('day', MAX(watch_date), CURRENT_DATE()) as days_since_last_watch,\n        \n        -- Activity level\n        CASE \n            WHEN days_since_last_watch <= 1 THEN 'Active'\n            WHEN days_since_last_watch <= 7 THEN 'Recent'\n            WHEN days_since_last_watch <= 30 THEN 'Occasional'\n            ELSE 'Inactive'\n        END as activity_status\n        \n    FROM NETFLIX_ANALYTICS.MARTS.fact_user_watch_sessions\n    GROUP BY user_id\n),\n\nuser_rankings AS (\n    SELECT\n        *,\n        -- Percentile rankings\n        PERCENT_RANK() OVER (ORDER BY total_watch_time_minutes) as watch_time_percentile,\n        PERCENT_RANK() OVER (ORDER BY avg_engagement_score) as engagement_percentile,\n        PERCENT_RANK() OVER (ORDER BY binge_session_ratio) as binge_percentile,\n        \n        -- Top user flags\n        CASE \n            WHEN total_watch_time_minutes >= PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY total_watch_time_minutes) OVER () THEN 'Heavy Watcher'\n            WHEN total_watch_time_minutes >= PERCENTILE_CONT(0.7) WITHIN GROUP (ORDER BY total_watch_time_minutes) OVER () THEN 'Regular Watcher'\n            ELSE 'Light Watcher'\n        END as watch_intensity,\n        \n        CASE \n            WHEN avg_engagement_score >= 80 THEN 'Highly Engaged'\n            WHEN avg_engagement_score >= 60 THEN 'Moderately Engaged'\n            ELSE 'Low Engagement'\n        END as engagement_level\n        \n    FROM user_aggregates\n)\n\nSELECT * FROM user_rankings", "relation_name": "NETFLIX_ANALYTICS.MARTS.dim_users", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T00:46:27.820373Z", "completed_at": "2025-07-14T00:46:27.823373Z"}, {"name": "execute", "started_at": "2025-07-14T00:46:27.824372Z", "completed_at": "2025-07-14T00:46:29.022692Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.203320026397705, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bdac0e-0002-631a-0001-fc7700012f36"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.netflix_analytics.mart_content_analytics", "compiled": true, "compiled_code": "\n\nWITH content_analytics AS (\n    SELECT\n        s.show_name,\n        s.total_views,\n        s.unique_viewers,\n        s.total_watch_time_minutes,\n        s.avg_watch_duration,\n        s.avg_engagement_score,\n        s.avg_completion_rate,\n        s.total_binge_sessions,\n        s.binge_session_ratio,\n        s.avg_views_per_viewer,\n        s.avg_watch_time_per_viewer,\n        s.avg_daily_views,\n        s.popularity_category,\n        s.engagement_level,\n        s.binge_category,\n        s.trend_status,\n        \n        -- Recent performance (last 7 days)\n        COUNT(CASE WHEN f.watch_date >= DATEADD('day', -7, CURRENT_DATE()) THEN 1 END) as views_last_7_days,\n        COUNT(DISTINCT CASE WHEN f.watch_date >= DATEADD('day', -7, CURRENT_DATE()) THEN f.user_id END) as unique_viewers_last_7_days,\n        AVG(CASE WHEN f.watch_date >= DATEADD('day', -7, CURRENT_DATE()) THEN f.engagement_score END) as engagement_last_7_days,\n        \n        -- Recent performance (last 30 days)\n        COUNT(CASE WHEN f.watch_date >= DATEADD('day', -30, CURRENT_DATE()) THEN 1 END) as views_last_30_days,\n        COUNT(DISTINCT CASE WHEN f.watch_date >= DATEADD('day', -30, CURRENT_DATE()) THEN f.user_id END) as unique_viewers_last_30_days,\n        \n        -- Time-based patterns\n        s.most_common_watch_hour,\n        s.most_common_watch_day,\n        \n        -- Content lifecycle\n        s.first_watched_date,\n        s.last_watched_date,\n        s.days_in_catalog,\n        s.days_since_last_view,\n        \n        -- Viewer demographics (simplified)\n        COUNT(DISTINCT f.user_id) as total_unique_viewers,\n        ROUND(COUNT(*) * 1.0 / COUNT(DISTINCT f.user_id), 2) as avg_sessions_per_viewer,\n        \n        -- Engagement depth\n        AVG(f.rolling_avg_engagement_7sessions) as avg_viewer_engagement,\n        AVG(f.rolling_avg_duration_7sessions) as avg_viewer_duration,\n        \n        -- Binge patterns\n        AVG(f.binge_sessions_last_7) as avg_binge_sessions_per_viewer,\n        \n        -- Content stickiness\n        CASE \n            WHEN s.avg_views_per_viewer >= 3 THEN 'High Stickiness'\n            WHEN s.avg_views_per_viewer >= 2 THEN 'Medium Stickiness'\n            ELSE 'Low Stickiness'\n        END as content_stickiness,\n        \n        -- Growth indicators\n\n        \n    FROM NETFLIX_ANALYTICS.MARTS.dim_shows s\n    LEFT JOIN NETFLIX_ANALYTICS.MARTS.fact_user_watch_sessions f ON s.show_name = f.show_name\n    GROUP BY \n        s.show_name, s.total_views, s.unique_viewers, s.total_watch_time_minutes, s.avg_watch_duration,\n        s.avg_engagement_score, s.avg_completion_rate, s.total_binge_sessions, s.binge_session_ratio,\n        s.avg_views_per_viewer, s.avg_watch_time_per_viewer, s.avg_daily_views, s.popularity_category,\n        s.engagement_level, s.binge_category, s.trend_status, s.most_common_watch_hour, s.most_common_watch_day, s.first_watched_date,\n        s.last_watched_date, s.days_in_catalog, s.days_since_last_view\n)\n\nSELECT * FROM content_analytics", "relation_name": "NETFLIX_ANALYTICS.MARTS.mart_content_analytics", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-14T00:46:28.296056Z", "completed_at": "2025-07-14T00:46:28.299058Z"}, {"name": "execute", "started_at": "2025-07-14T00:46:28.300059Z", "completed_at": "2025-07-14T00:46:29.532467Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2374107837677002, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bdac0e-0002-6109-0000-0001fc77fefd"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.netflix_analytics.mart_user_analytics", "compiled": true, "compiled_code": "\n\nWITH user_analytics AS (\n    SELECT\n        u.user_id,\n        u.total_sessions,\n        u.total_watch_time_minutes,\n        u.avg_session_duration,\n        u.avg_engagement_score,\n        u.avg_completion_rate,\n        u.total_binge_sessions,\n        u.binge_session_ratio,\n        u.unique_shows_watched,\n        u.days_active,\n        u.activity_status,\n        u.watch_intensity,\n        u.engagement_level,\n        u.watch_time_percentile,\n        u.engagement_percentile,\n        u.binge_percentile,\n        \n        -- Recent activity (last 7 days)\n        COUNT(CASE WHEN f.watch_date >= DATEADD('day', -7, CURRENT_DATE()) THEN 1 END) as sessions_last_7_days,\n        SUM(CASE WHEN f.watch_date >= DATEADD('day', -7, CURRENT_DATE()) THEN f.watch_duration_minutes END) as watch_time_last_7_days,\n        AVG(CASE WHEN f.watch_date >= DATEADD('day', -7, CURRENT_DATE()) THEN f.engagement_score END) as engagement_last_7_days,\n        \n        -- Recent activity (last 30 days)\n        COUNT(CASE WHEN f.watch_date >= DATEADD('day', -30, CURRENT_DATE()) THEN 1 END) as sessions_last_30_days,\n        SUM(CASE WHEN f.watch_date >= DATEADD('day', -30, CURRENT_DATE()) THEN f.watch_duration_minutes END) as watch_time_last_30_days,\n        \n        -- Top shows watched\n        ARRAY_AGG(DISTINCT f.show_name) WITHIN GROUP (ORDER BY f.show_name) as top_shows,\n        \n        -- Peak activity times\n        u.most_common_watch_hour,\n        u.most_common_watch_day,\n        \n        -- User lifecycle\n        u.first_watch_date,\n        u.last_watch_date,\n        u.days_since_last_watch,\n        \n        -- Engagement trends\n        AVG(f.rolling_avg_engagement_7sessions) as avg_rolling_engagement,\n        AVG(f.rolling_avg_duration_7sessions) as avg_rolling_duration,\n        \n        -- Binge patterns\n        AVG(f.binge_sessions_last_7) as avg_binge_sessions_per_week,\n        \n        -- Retention metrics\n        CASE \n            WHEN u.days_since_last_watch <= 1 THEN 'Retained'\n            WHEN u.days_since_last_watch <= 7 THEN 'At Risk'\n            ELSE 'Churned'\n        END as retention_status\n        \n    FROM NETFLIX_ANALYTICS.MARTS.dim_users u\n    LEFT JOIN NETFLIX_ANALYTICS.MARTS.fact_user_watch_sessions f ON u.user_id = f.user_id\n    GROUP BY \n        u.user_id, u.total_sessions, u.total_watch_time_minutes, u.avg_session_duration,\n        u.avg_engagement_score, u.avg_completion_rate, u.total_binge_sessions, u.binge_session_ratio,\n        u.unique_shows_watched, u.days_active, u.activity_status, u.watch_intensity, u.engagement_level,\n        u.watch_time_percentile, u.engagement_percentile, u.binge_percentile, u.most_common_watch_hour,\n        u.most_common_watch_day, u.first_watch_date, u.last_watch_date, u.days_since_last_watch\n)\n\nSELECT * FROM user_analytics", "relation_name": "NETFLIX_ANALYTICS.MARTS.mart_user_analytics", "batch_results": null}], "elapsed_time": 9.219010591506958, "args": {"macro_debugging": false, "log_level_file": "debug", "profiles_dir": "C:\\Users\\elang\\Desktop\\netlfix-behavior-pipeline\\streaming-behavior-pipeline", "upload_to_artifacts_ingest_api": false, "use_colors": true, "indirect_selection": "eager", "log_file_max_bytes": 10485760, "source_freshness_run_project_hooks": true, "require_all_warnings_handled_by_warn_error": false, "empty": false, "introspect": true, "log_level": "info", "populate_cache": true, "send_anonymous_usage_stats": true, "static_parser": true, "project_dir": "C:\\Users\\elang\\Desktop\\netlfix-behavior-pipeline\\streaming-behavior-pipeline", "version_check": true, "log_format_file": "debug", "require_nested_cumulative_type_params": false, "require_resource_names_without_spaces": true, "invocation_command": "dbt run", "partial_parse": true, "select": [], "state_modified_compare_more_unrendered_values": false, "log_format": "default", "use_fast_test_edges": false, "print": true, "favor_state": false, "log_path": "C:\\Users\\elang\\Desktop\\netlfix-behavior-pipeline\\streaming-behavior-pipeline\\logs", "partial_parse_file_diff": true, "exclude": [], "validate_macro_args": false, "printer_width": 80, "defer": false, "state_modified_compare_vars": false, "require_batched_execution_for_custom_microbatch_strategy": false, "require_yaml_configuration_for_mf_time_spines": false, "cache_selected_only": false, "show_resource_report": false, "quiet": false, "vars": {}, "warn_error_options": {"error": [], "warn": [], "silence": []}, "strict_mode": false, "which": "run", "require_explicit_package_overrides_for_builtin_materializations": true, "write_json": true, "use_colors_file": true, "skip_nodes_if_on_run_start_fails": false, "show_all_deprecations": false}}